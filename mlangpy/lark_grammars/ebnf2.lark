// The following grammar attempts to describe EBNF as specified by ISO/IEC 14977.
// It is adopted from ISO/IEC 14977 itself, section 8.1, which defines EBNF
// using its own syntax. The syntax of lark grammar files lacks some of the features
// of EBNF, and so changes must be made to some rules to accommodate. This grammar
// recognises EBNF grammars using only the standard representations for terminal
// characters.

// =====================================================================
//            Part 1: defining the roles of characters in EBNF
// =====================================================================

%import common.LETTER
%import common.DIGIT

// See Part 4 for structure of EBNF rules
start: syntax

CONCAT: ","
DEFINE: "="
DEF_SEP: "|"
START_COMMENT: "(*"
END_COMMENT: "*)"
START_GROUP: "("
END_GROUP: ")"
START_OPTION: "["
END_OPTION: "]"
START_REPEAT: "{"
END_REPEAT: "}"
EXCEPT: "-"
FIRST_QUOTE: "'"
REPETITION: "*"
SECOND_QUOTE: "\""
SPECIAL_SEQ: "?"
TERMINATOR: ";"

_OTHER_CHARACTER: ":" | "+" | "_" | "%" | "@"
    | "&" | "#" | "$" | "<" | ">" | "\\" | "^" | "`" | "~"

// ISO 6429 not openly available
// horizontal tabulation character =
//  ? ISO 6429 character Horizontal Tabulation ? ;
HTAB: /\t/

// new line =
//  { ? ISO 6429 character Carriage Return ? },
//  ? ISO 6429 character Line Feed ?,
//  { ? ISO 6429 character Carriage Return ? } ;
CR : /\r/
LF : /\n/
NEWLINE: CR* LF CR*

SPACE: " "

// vertical tabulation character =
//  ? ISO 6429 character Vertical Tabulation ? ;
// -Not implemented

// form feed =
//  ? ISO 6429 character Form Feed ? ;
// -Not implemented


// =====================================================================
//       Part 2: The removal of unnecessary non-printing characters
//          from a syntax.
// =====================================================================

terminal_no_quotes: LETTER
    | DIGIT
    | CONCAT
    | DEFINE
    | DEF_SEP
    | START_COMMENT | END_COMMENT
    | START_GROUP | END_GROUP
    | START_OPTION | END_OPTION
    | START_REPEAT | END_REPEAT
    | EXCEPT
    | REPETITION
    | SPECIAL_SEQ
    | TERMINATOR
    | _OTHER_CHARACTER

terminal_character: terminal_no_quotes
    | FIRST_QUOTE | SECOND_QUOTE

// Long-winded definitions coming up because we don't have access to the exception
// operator.
gap_free_symbol: (terminal_no_quotes | FIRST_QUOTE)
    | (terminal_no_quotes | SECOND_QUOTE)
    | terminal_string

terminal_string: FIRST_QUOTE first_terminal+ FIRST_QUOTE
    | SECOND_QUOTE second_terminal+ SECOND_QUOTE

first_terminal: terminal_no_quotes | SECOND_QUOTE
second_terminal: terminal_no_quotes | FIRST_QUOTE

gap_separator: SPACE | HTAB | NEWLINE

// =====================================================================
//       Part 3: The removal of bracketed-textual-comments from
//          gap-free-symbols that form a syntax.
// =====================================================================
commentless: CONCAT
    | DEFINE
    | DEF_SEP
    | START_GROUP | END_GROUP
    | START_OPTION | END_OPTION
    | START_REPEAT | END_REPEAT
    | EXCEPT
    | REPETITION
    | TERMINATOR
    | meta_id | INTEGER | terminal_string
    | special_sequence

INTEGER: DIGIT+

// Form for non-terminals
meta_id: LETTER META_ID_CHAR*
META_ID_CHAR: LETTER | DIGIT

// Form for special sequences
special_sequence: SPECIAL_SEQ SPECIAL_SEQ_CHAR* SPECIAL_SEQ
SPECIAL_SEQ_CHAR: LETTER
    | DIGIT
    | CONCAT
    | DEFINE
    | DEF_SEP
    | START_COMMENT | END_COMMENT
    | START_GROUP | END_GROUP
    | START_OPTION | END_OPTION
    | START_REPEAT | END_REPEAT
    | EXCEPT
    | REPETITION
    | TERMINATOR
    | _OTHER_CHARACTER
    | FIRST_QUOTE | SECOND_QUOTE

// Amended: comment_symbol is not defined in terms of commentless due
// to the ambiguity it introduces. For the purpose of a comment, we don't
// particularly care about whether a particular word is a meta-id; we can
// work it out by parsing the word itself.
bracketed_textual_comment: START_COMMENT comment_symbol* END_COMMENT
comment_symbol: bracketed_textual_comment | _OTHER_CHARACTER
    | CONCAT
    | DEFINE
    | DEF_SEP
    | START_GROUP | END_GROUP
    | START_OPTION | END_OPTION
    | START_REPEAT | END_REPEAT
    | EXCEPT
    | REPETITION
    | TERMINATOR
    | LETTER | DIGIT

// =====================================================================
//       Part 4: The final part of this syntax defines the abstract
//          syntax of EBNF, i.e. the structure in terms of the
//          commentless symbols.
// =====================================================================
syntax: bracketed_textual_comment* syntax_rule+ bracketed_textual_comment*
syntax_rule: meta_id DEFINE definitions_list TERMINATOR

definitions_list: single_definition (DEF_SEP single_definition)*
single_definition: syntactic_term (CONCAT syntactic_term)*
syntactic_term: syntactic_factor (EXCEPT syntactic_exception)?

// Exceptions are defined using a special sequence:
//      a syntactic-factor that could be replaced by a syntactic-factor
//      containing no meta-identifiers.
// So be optimistic and assume that the designer knows what they're doing -
// this means nonsensical exceptions can be written in some cases.
syntactic_exception: syntactic_factor

syntactic_factor: (repeat)? syntactic_primary
repeat: specific | range
specific: INTEGER
range: INTEGER? REPETITION INTEGER?

syntactic_primary: optional_sequence
    | repeated_sequence
    | grouped_sequence
    | meta_id | terminal_string
    | special_sequence | empty_sequence

optional_sequence: START_OPTION definitions_list END_OPTION
repeated_sequence: START_REPEAT definitions_list END_REPEAT
grouped_sequence:  START_GROUP definitions_list END_GROUP
empty_sequence:


